class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField(default=0)
    def __str__(self):
        return self.question_text
    def was_published_recently(self):
        return self.pub_date >= timezone.now() - datetime.timedelta(days=1)

class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)
    def __str__(self):
        return self.choice_text
        
def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    template = loader.get_template('blog/index.html')
    context = {
        'latest_question_list': latest_question_list,
    }
    return HttpResponse(template.render(context, request))

def detail(request, question_id):
    try:
        question = Question.objects.get(pk=question_id)
    except Question.DoesNotExist:
        raise Http404("Question does not exist")
    return render(request, 'blog/detail.html', {'question': question})

def results(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    return render(request, 'blog/results.html', {'question': question})

def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.POST['choice'])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form.
        return render(request, 'blog/detail.html', {
            'question': question,
            'error_message': "You didn't select a choice.",
        })
    else:
        selected_choice.votes += 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
        return HttpResponseRedirect(reverse('blog:results', args=(question.id,)))



{% url 'add_comment_to_post' pk=post.pk %}

#class PostDetail(generic.DetailView):
#    model = Post
#    template_name = 'post_detail.html'
    

#class CategoryList(generic.ListView):
#    queryset = Category.objects.all()
#    template_name = 'category_detail.html'

#class CategoryDetail(generic.DetailView):
#    model = Category
#    template_name = 'category_detail.html'
#def category_list(request):
    # Category loops on index page.
#    categories = Category.objects.all()
#    args = {'title': title}
#    return render(request, 'index.html', args)

# def category_detail(request, slug):
#    template_name = 'category_detail.html'
#    category = get_object_or_404(Category, slug=slug)
#    title = category.title.all()
#    return render(request, template_name, {'category': category, 
#                                            'title': title})